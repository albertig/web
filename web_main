clc
clear all
close all

clear all
close all
clc

% for samples = 1:1000

% generate web geometry, element-node connectivity, ground node IDs, and
% displacement BCs
% geo = web_geometry('octagon',1200,0,0.01);
n_radial = 8;
n_spiral = 6;
D = 1.2; %stretched OD of web in meters
beta = 50;
geo = web_spiral(n_radial,n_spiral,D,beta);

% assign linear stiffness
K = 2077.682747*ones(length(geo.connect),1);
K(geo.spiral) = 8.384936875;

% delete specifified elements
deleted = [];
geo.connect(deleted,:) = [];
K(deleted) = [];

% plot web mesh
web_plotMesh(geo)

% generate relaxed element lengths
eles = geo.nodes(geo.connect,:);
V = eles(1:length(geo.connect),:)-eles(length(geo.connect)+1:end,:);
L = sqrt(sum(V.*V,2));
K = K./L;

beq = geo.displaced;
beq = beq(:);

Aeq = zeros(length(geo.ground_nodes)*3,length(geo.nodes(:)));
for i = 1:length(geo.ground_nodes)
    Aeq(i,geo.ground_nodes(i)) = 1;
    Aeq(i+length(geo.ground_nodes),geo.ground_nodes(i)+length(geo.nodes)) = 1;
    Aeq(i+2*length(geo.ground_nodes),geo.ground_nodes(i)+2*length(geo.nodes)) = 1;
end

x0 = geo.nodes;
x0(:,3) = 0;
x0(geo.ground_nodes,:) = geo.displaced;
x0 = x0(:);

options = optimoptions('fmincon');
options = optimoptions(options,'maxfunevals',50000,'tolfun',1e-9);
[x,fval,exitflag,output] = fmincon(@(x)web_energy_v2(x,geo,L,K),x0,[],[],Aeq,beq,[],[],[],options);




x = reshape(x,length(geo.nodes),3);
displaced_nodes = x;
displaced_eles = displaced_nodes(geo.connect,:); %x-y pairs for all displaced elements
V = displaced_eles(1:length(geo.connect),:)-displaced_eles(length(geo.connect)+1:end,:); %displaced element vectors
l = sqrt(sum(V.*V,2)); %displaced lengths
delta = l-L;
tension = K.*delta; %element tensions
elongation = delta./L; %element elongations
tension_mean = mean(tension,2);
tension_std = std(tension,0,2);
elongation_mean = mean(elongation,2);
elongation_std = std(elongation,0,2);
% end

units = V./norm(V);
for i = 1:length(units)
    tension_components(i,:) = tension(i)*units(i,:);
end


tension_mean_range = max(tension_mean)-min(tension_mean);
tension_mean_scale = 1+round((tension_mean-min(tension_mean))*100/tension_mean_range);
elongation_mean_range = max(elongation_mean)-min(elongation_mean);
elongation_mean_scale = 1+round((elongation_mean-min(elongation_mean))*100/elongation_mean_range);

figure()
set(gcf, 'PaperPositionMode', 'manual');
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperPosition', [1 1 5 3]);
hold on
box on
colors = colormap(jet(101));
elements_new = zeros(length(geo.connect),6);
ne = length(geo.connect);
for i = 1:ne
    % generate element matrix which has two pairs of x-y coordinates
    elements_new(i,:) = [x(geo.connect(i,1),:) x(geo.connect(i,2),:)];
    elements(i,:) = [geo.nodes(geo.connect(i,1),:) geo.nodes(geo.connect(i,2),:)];
    % draw lines representing web segments ("elements")
    line([elements_new(i,1) elements_new(i,4)],[elements_new(i,2) elements_new(i,5)],'color',colors(elongation_mean_scale(i),:),'linewidth',3)
    
end

plot(x(:,1),x(:,2),'ko','markersize',5,'markerfacecolor',[1 1 1])
axis equal

xlabel('X (m)')
ylabel('Y (m)')
title('Elongation')
cbar_handle = colorbar;
caxis([min(elongation_mean) max(elongation_mean)])
% print('-dtiff','-r600','elongations')

figure()
set(gcf, 'PaperPositionMode', 'manual');
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperPosition', [1 1 5 3]);
hold on
box on
colors = colormap(jet(101));
for i = 1:ne
    % generate element matrix which has two pairs of x-y coordinates
    elements_new(i,:) = [x(geo.connect(i,1),:) x(geo.connect(i,2),:)];
    elements(i,:) = [geo.nodes(geo.connect(i,1),:) geo.nodes(geo.connect(i,2),:)];
    % draw lines representing web segments ("elements")
    line([elements_new(i,1) elements_new(i,4)],[elements_new(i,2) elements_new(i,5)],'color',colors(tension_mean_scale(i),:),'linewidth',3)
    
end

plot(x(:,1),x(:,2),'ko','markersize',5,'markerfacecolor',[1 1 1])
axis equal

xlabel('X (m)')
ylabel('Y (m)')
title('Tension')
cbar_handle = colorbar;
set(get(cbar_handle,'xlabel'),'string','(N)')
caxis([min(tension_mean) max(tension_mean)])
% print('-dtiff','-r600','tensions')


figure()
set(gcf, 'PaperPositionMode', 'manual');
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperPosition', [1 1 5 3]);
hold on
box on
grid on
for i = 1:ne
    
    % draw lines representing web segments ("elements")
    line([elements(i,1) elements(i,4)],[elements(i,2) elements(i,5)],[elements(i,3) elements(i,6)],'color','k','linewidth',1.5)
    line([elements_new(i,1) elements_new(i,4)],[elements_new(i,2) elements_new(i,5)],[elements_new(i,3) elements_new(i,6)],'color','r','linewidth',1.5)
    
end
axis equal
plot3(geo.nodes(:,1),geo.nodes(:,2),geo.nodes(:,3),'ko',x(:,1),x(:,2),x(:,3),'ro','markersize',5,'markerfacecolor',[1 1 1])
view(45,20)
legend('Relaxed','Tensioned','location','southoutside')
title('Tensioned Web Geometry')
xlabel('X (m)')
ylabel('Y (m)')
zlabel('Z (m)')
% print('-dtiff','-r600','initial and tensioned geometry')

%%%EQUILIBRIUM CHECKING
% node_id = 13
%
% [r1,~]=find(geo.connect(:,2) == node_id & geo.connect(:,1 ~= node_id))
% [r2,~] = find(geo.connect(:,1) == node_id & geo.connect(:,2 ~= node_id))
% out_elements = [r1; r2]
% out_nodes = [geo.connect(r1,1); geo.connect(r2,2)]
% dxdy = x(out_nodes,1:2)-ones(length(out_nodes),1)*x(node_id,1:2)
% out_magnitudes = sqrt(sum(dxdy.*dxdy,2))
% out_unit_vectors = [dxdy(:,1)./out_magnitudes dxdy(:,2)./out_magnitudes]
% sum(out_unit_vectors.*repmat(tension(out_elements),1,2))


%%%%%% DYNAMIC SUBSTRUCTURING
tic

nodes = geo.nodes;
nn = length(nodes);
node_numbers = (1:nn);
ground_nodes = (1:8); %nodes attached to ground
BCs = ~ismember(node_numbers,ground_nodes);
dofs = sum(BCs);
free_nodes = find(BCs);

elements = geo.connect;

%make sure first index is node number with smallest value for each element,
%why? for the L matrix building and so the block diagonal structure is
%maintained
elements = sort(elements,2);
ne = length(elements);
ele_dxdy = nodes(elements(:,1),:)-nodes(elements(:,2),:);
ele_lengths = sqrt(sum(ele_dxdy.*ele_dxdy,2))./2; %element lengths (m)
% omega = linspace(10,100,500)*2*pi; %frequencies (Hz) over which to simulate
omega = 30*2*pi;
c_eles = zeros(ne,1); %zero damping on the radials
c_eles(geo.spiral) = 0.1; %damping on the spiral strings
rho = 2.5/100; %string density (kg/m)

spider_ele_numbers = nn-15:nn-8; %the nodes that the legs attach to
spider_free_node = nn+1;
nn = nn+1;
spider_connect = [spider_ele_numbers' spider_free_node*ones(8,1)]; %a spider always has 8 legs!;
elements = [elements; spider_connect];

%%%%% spider body connectivity
dofs = dofs+1; %add a DOF for the body of the spider
free_nodes = [free_nodes spider_free_node]; %add in the body
m = 0.45; %spider mass (kg)
spring_k = 400; %spider leg stiffness (N/m)
ne = length(elements);
spider_eles = ne-7:ne;

%%%%% coupling matrix from connectivity
L = zeros(2*ne,dofs);
%populate L matrix with booleans, next version should try and do this in
%one shot using connectivity
for i = 1:ne
    L(i*2-1,:) = elements(i,1) == free_nodes;
    L(i*2,:) = elements(i,2) == free_nodes;
end

for j = 1:length(omega)
    w = omega(j);
    for k = 1:ne
        if k ~= spider_eles %this is a string element
            i = sqrt(-1);
            l = ele_lengths(k);
            S = tension(k);
            c = c_eles(k);
            %complete expression with linear, continuous damping
            Z11 = (S*w*(exp((2*l*(S*w*(c*i - rho*w))^(1/2))/S) + 1)*(c*i - rho*w))/((exp((2*l*(S*w*(c*i - rho*w))^(1/2))/S) - 1)*(S*w*(c*i - rho*w))^(1/2));
            Z12 = -(2*S*w*exp((l*(S*w*(c*i - rho*w))^(1/2))/S)*(c*i - rho*w))/((exp((2*l*(S*w*(c*i - rho*w))^(1/2))/S) - 1)*(S*w*(c*i - rho*w))^(1/2));
            Z_eles{k} = [Z11 Z12; Z12 Z11];
            %expression with no damping
            %         Z_eles{i} = [S(i)*w(j)*sqrt(rho(i)/S(i))*cot(w(j)*sqrt(rho(i)/S(i))*l(i)) -S(i)*w(j)*sqrt(rho(i)/S(i))*csc(w(j)*sqrt(rho(i)/S(i))*l(i))
            %         -S(i)*w(j)*sqrt(rho(i)/S(i))*csc(w(j)*sqrt(rho(i)/S(i))*l(i)) S(i)*w(j)*sqrt(rho(i)/S(i))*cot(w(j)*sqrt(rho(i)/S(i))*l(i))];
        else %this is a leg element
            Z_eles{k} = [spring_k -spring_k; -spring_k -m/8*w^2+spring_k];
        end
    end
    Z = blkdiag(Z_eles{:});
    Z_sys(:,:,j) = L'*Z*L;
    Y_sys(:,:,j) = inv(Z_sys(:,:,j));
end
toc

%%%% SPATIAL INFO PLOT
figure()
set(gcf, 'PaperPositionMode', 'manual');
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperPosition', [1 4 5 3]);
y = real(20*log10(Y_sys([44:51]-8,[11 19 27 35 43]-8)));
angles = [135 180 225 270 315 0 45 90];
[angles,k] = sort(angles);
hold on
box on
% grid on
spots = [5 4 3 2 1];
xlim([0 360])
for i = 1:5
    plot(angles,y(k,i)','-o','linewidth',1)
    yl = ylim;
    xl = xlim;
    text(315+.02*(xl(2)-xl(1)),y(k(end),i),['n = ' num2str(spots(i))],'verticalalignment','middle','interpreter','latex')
end
ax = gca;
ax.XTick = angles;
xlabel('Angular Position of Leg (deg)','interpreter','latex')
ylabel('Receptance (dB)','interpreter','latex')
title('Modeled Spatial Detection @ 30Hz','interpreter','latex')
line([90 90],yl,'linestyle','--','color','k','linewidth',1)
text(90+.01*(xl(2)-xl(1)),yl(1)+.05*(yl(2)-yl(1)),'True Source Location','horizontalalignment','left','interpreter','latex')
text(xl(2)-.03*(xl(2)-xl(1)),yl(2)-.03*(yl(2)-yl(1)),'n = spiral levels between source and leg','horizontalalignment','right','verticalalignment','top','interpreter','latex')
print('-dpng','web spatial detection no damping')

figure()


%%%% PLOTTING FREQUENCY RESPONSE
% figure()
% set(gcf, 'PaperPositionMode', 'manual');
% set(gcf, 'PaperUnits', 'inches');
% set(gcf, 'PaperPosition', [1 1 5 3]);
% hold on
% grid on
% box on
% for i = [43 35 27 19 11] - 8 %this are the node numbers from the mesh plot minus the fixed number of DOFs at varying distance along a single radial
%     plot(omega/(2*pi),20*log10(squeeze(Y_sys(51-8,i,:))),'linewidth',1)
% end
% title('Frequency Response')
% xlabel('Frequency (Hz)')
% ylabel('Receptance (dB)')
%
% figure()
% set(gcf, 'PaperPositionMode', 'manual');
% set(gcf, 'PaperUnits', 'inches');
% set(gcf, 'PaperPosition', [1 1 5 3]);
% hold on
% box on
% for i = [50 49 48 47 46 45 44 51 58] - 8 %this displays the body receptance, the heading leg receptance, and other legs at different angles
%     if i == 51-8
%         plot(omega/(2*pi),20*log10(squeeze(Y_sys(i,11-8,:))),'r','linewidth',1)
%     elseif i == 58-8
%         plot(omega/(2*pi),20*log10(squeeze(Y_sys(i,11-8,:))),'b','linewidth',1)
%     else
%         plot(omega/(2*pi),20*log10(squeeze(Y_sys(i,11-8,:))),'k','linewidth',1)
%     end
% end
% grid on
% title('Frequency Response')
% xlabel('Frequency (Hz)')
% ylabel('Receptance (dB)')
% hold off
